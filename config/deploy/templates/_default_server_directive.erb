<% if fetch(:nginx_use_ssl) && nginx_pass_ssl_client_cert -%>
# source: http://forum.nginx.org/read.php?2,236546,236596
map $ssl_client_raw_cert $a {
    "~^(-.*-\n)(?<1st>[^\n]+)\n((?<b>[^\n]+)\n)?((?<c>[^\n]+)\n)?((?<d>[^\n]+)\n)?((?<e>[^\n]+)\n)?((?<f>[^\n]+)\n)?((?<g>[^\n]+)\n)?((?<h>[^\n]+)\n)?((?<i>[^\n]+)\n)?((?<j>[^\n]+)\n)?((?<k>[^\n]+)\n)?((?<l>[^\n]+)\n)?((?<m>[^\n]+)\n)?((?<n>[^\n]+)\n)?((?<o>[^\n]+)\n)?((?<p>[^\n]+)\n)?((?<q>[^\n]+)\n)?((?<r>[^\n]+)\n)?((?<s>[^\n]+)\n)?((?<t>[^\n]+)\n)?((?<v>[^\n]+)\n)?((?<u>[^\n]+)\n)?((?<w>[^\n]+)\n)?((?<x>[^\n]+)\n)?((?<y>[^\n]+)\n)?((?<z>[^\n]+)\n)?(-.*-)$" $1st;
}
<% end -%>

server {
<% if fetch(:nginx_use_ssl) -%>
    <% if fetch(:nginx_use_spdy) -%>
    listen <%= ssl_port %> spdy;
    listen [::]:<%= ssl_port %> spdy;
    <% else -%>
    listen <%= ssl_port %> ssl http2;
    listen [::]:<%= ssl_port %> ssl http2;
    <% end -%>

    # the certificate and key
    ssl_certificate <%= nginx_ssl_cert_file %>;
    ssl_certificate_key <%= nginx_ssl_cert_key_file %>;

    # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
    # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
    resolver 8.8.4.4 8.8.8.8 valid=300s;
    resolver_timeout 10s;
    ssl_stapling on;
    ssl_stapling_verify off;

    # enable session resumption to improve https performance
    # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 5m;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    # enables server-side protection from BEAST attacks
    # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
    ssl_prefer_server_ciphers on;

    # disable SSLv3(enabled by default since nginx 0.8.19) since it is less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    # ciphers chosen for forward secrecy and compatibility
    # http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

    # config to not allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options DENY;

<% else -%>
    listen <%= fetch(:nginx_server_port) %>;
    listen [::]:<%= fetch(:nginx_server_port) %>;
<% end -%>


  ###########################################
  ###########################################
  #### the following settings are taken from https://gist.github.com/plentz/6737338 & https://mattbrictson.com/a-better-way-to-ssl

  # do not send the nginx version number in error pages and Server header
  server_tokens off;

  # control buffer overflow attacks
  # https://www.acunetix.com/blog/articles/nginx-server-security-hardening-configuration-1/
  client_body_buffer_size 10k;
  client_max_body_size 50m;
  ###########################################
  # if you are using oauth you will need to increase these to something like 4 and 8k
  ###########################################
  client_header_buffer_size 8k;
  large_client_header_buffers 4 8k;


  # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
  # to disable content-type sniffing on some browsers.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
  # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
  # "soon" on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
  add_header X-Content-Type-Options nosniff;

  # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
  # It is usually enabled by default anyway, so the role of this header is to re-enable the filter for
  # this particular website if it was disabled by the user.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  add_header X-XSS-Protection "1; mode=block";

<% if fetch(:nginx_use_ssl) && nginx_pass_ssl_client_cert -%>
    ssl_verify_client optional_no_ca;
<% end -%>

    ###########################################
    ###########################################

    # set timeouts to improve performance
    # https://www.digitalocean.com/community/tutorials/how-to-optimize-nginx-configuration
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;

    # allow nginx to zip files to reduce bandwidth
    # https://www.digitalocean.com/community/tutorials/how-to-optimize-nginx-configuration
    gzip             on;
    gzip_comp_level  2;
    gzip_min_length  500;
    gzip_proxied     expired no-cache no-store private auth;
    gzip_types       text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml font/opentype;
    gzip_vary        on;

    location ~ ^/(assets|images|javascripts|stylesheets|system)/ {
      gzip_static on;
      expires max;
      add_header Cache-Control public;
    }

    error_page 500 502 504 /500.html;
    error_page 503 @503;

    server_name <%= fetch(:nginx_server_name) %> <%= fetch(:nginx_server_name_secondary) %>;
    root <%= current_path %>/public;
    try_files $uri/index.html $uri @unicorn_<%= fetch(:nginx_config_name) %>;

    location @unicorn_<%= fetch(:nginx_config_name) %> {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        <% if fetch(:nginx_read_timeout) -%>
        proxy_read_timeout <%= fetch(:nginx_read_timeout) %>;
        <% end -%>
        <% if fetch(:nginx_use_ssl) -%>
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Ssl on;
        <% end -%>
        <% if fetch(:nginx_use_ssl) && nginx_pass_ssl_client_cert -%>
        # source: http://forum.nginx.org/read.php?2,236546,236596
        proxy_set_header X-Client-Cert $a$b$c$d$e$f$g$h$i$j$k$l$m$n$o$p$q$r$s$t$v$u$w$x$y$z;
        <% end -%>

        proxy_pass http://unicorn_<%= fetch(:nginx_config_name) %>;
        # limit_req zone=one;
        access_log <%= nginx_access_log_file %>;
        error_log <%= nginx_error_log_file %>;
    }

    location = /50x.html {
        root html;
    }

    location = /404.html {
        root html;
    }

    location @503 {
        error_page 405 = /system/maintenance.html;
        if (-f $document_root/system/maintenance.html) {
            rewrite ^(.*)$ /system/maintenance.html break;
        }
        rewrite ^(.*)$ /503.html break;
    }

    if ($request_method !~ ^(GET|HEAD|PUT|PATCH|POST|DELETE|OPTIONS)$ ){
        return 405;
    }

    if (-f $document_root/system/maintenance.html) {
        return 503;
    }

    ##############################################################
    # the following is to allow letsencrypt access to certs
    ##############################################################
    location ~ /.well-known {
      allow all;
    }


}
