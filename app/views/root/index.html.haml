- content_for :custom_stylesheet, 'page/root'
- content_for :custom_javascript, 'page/root'
%section.content#filter
  .search
    .search-input
      .search-group
        - if I18n.locale == :ka
          .en2ka
            .en2ka-switcher{title: t('.title.keyboard')}= 'KA'
            %input{type: 'text', placeholder: t('.placeholder.what'), title: t('.placeholder.what'), 'data-filter': 'what', value: filter[:what] }
        - else
          %input{type: 'text', placeholder: t('.placeholder.what'), title: t('.placeholder.what'), 'data-filter': 'what', value: filter[:what] }
        %input{type: 'submit', value: t('shared.search')}
  .filter-row1
    .search-input
      %input{id: "age-child", name: "age", type: "radio", value: "child"}
      %label.child{for: "age-child"}
        %i{class: 'children'}
        = t('shared.filters.children')
      %input{id: "age-adult", name: "age", type: "radio", value: "adult"}
      %label.adult{for: "age-adult"}
        %i{class: 'adult'}
        = t('shared.filters.adults')
    .search-input
      = collection_select :filter, :region, Region.all, :id, :name, { selected: filter[:where].present? ? filter[:where] : nil}, { id: 'region_filter', 'data-filter': 'where', 'data-placeholder': t('.placeholder.where'), 'title': t('.placeholder.where'), multiple: true, style: 'display: none;' }
  .filter
    %ul
      %li.filter-prompt
        %label= t('.filters')
        = image_tag(asset_path("svg/filter.svg"), alt: t('.alt.filter'), title: t('.alt.filter'))
      %li.filter-service.collapsed{'data-filter': 'services'}
        .inner-left-border
        .toggle
          %label= t('.services')
          .filter-caret
        - filtered_services = @services_old.select{|s| s[4] }
        %ul.list{'data-order': filtered_services.map{|m| m[3]}}
          - filtered_services.each do |service|
            %li.service{'data-id': service[0], 'data-order': service[3]}
              %i{class: service[2]}
              %span= service[1]
              .close
        .input-group{'data-set-max-height': 'parent' }
          %ul.services
            - @services_old.each do |service|
              %li.service{ class: (service[4] ? 'hidden' : nil), 'data-id': service[0], 'data-order': service[3] }
                %i{ class: service[2] }
                %span= service[1]
          .button-group
            %button.reset=t('.cancel')
            %button.apply=t('.apply')
        .inner-right-border
      %li.filter-group
        .filter-rator
          = render partial: 'shared/rator', locals: { rate: filter[:rate], rator: {'data-filter': 'rate'}, label: t('.rating'), is_filter: true }
        .filter-favorite
          = render partial: 'shared/favoritor', locals: { is_filter: true, is_favorite: filter[:favorite], label: t('.favorites'), title: filter[:favorite] ? t('.alt.show_all') : t('.alt.show_favorite') }

  .services
    %ul.toggleable-list
      - @services.select{|x| x.is_root?}.each_with_index do |root_service, i|
        %li.service{data: {chidren: root_service.for_children.to_s, adult: root_service.for_adults.to_s}}
          - services = @services.select{|x| x.parent_id == root_service.id}
          %a{name: "block-#{i+1}"}
            %i{class: root_service.icon}
            %span.name
              = root_service.name
            %span.caret
          - if services.present?
            %ul.toggleable-list-text
              - services.each do |service|
                %li{data: {chidren: service.for_children.to_s, adult: service.for_adults.to_s}}
                  = service.name


  .info
    %a.list-view.mobile-hidden{href: 'javascript:void(0);', 'toggle-view': :list}
      = t('.list_view')
      %i
    %a.map-view{href: 'javascript:void(0);', 'toggle-view': :map}
      = t('.map_view')
      %i
    .count
      = 0
      %span= t('.result', count: 1)
  .result-container
    %ul.result
    = render partial: "shared/footer", locals: { with_links: true }
%section.mapper.mobile-hidden
  .map-container
    #places_map.map
    .map-filter
      %input{type: :checkbox, name: 'filter_by_map', 'data-filter': 'map', id: 'by_map', checked: (filter[:map].present? ? 'checked' : nil), 'data-m': filter[:map].to_s }
      %label{for: 'by_map'}= t('.filter.by_map')
    .map-zoomer
      .in{'data-map': 'locator_map'} +
      .hr
      .out{'data-map': 'locator_map'} âˆ’
= render partial: "shared/footer", locals: { klass: 'light' }
