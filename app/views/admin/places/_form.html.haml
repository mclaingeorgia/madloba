.form-container{class: @form_container_class}
  = simple_form_for obj, url: url, html: { class: @form_class } do |f|
    = devise_error_messages!
    = f.input :redirect_default, as: :hidden, input_html: { value: redirect_default }
    .column-view
      .column
        = render partial: 'shared/fields_localization', locals: { fields: { name: nil, description: { as: :text, input_html: { rows: 10, style: 'width: 100%' } }} , form: f }
        .indent
          .fields-collection
            %label.fields-collection-label= Place.human_attribute(:services, false)
            .fields-collection-wrapper
              = f.collection_check_boxes(:service_ids, Service.all, :id, :name) do |b|
                .field-wrapper
                  = b.check_box class: 'field-input'
                  = b.label class: 'field-label service' do
                    %i{ class: "#{b.object.icon}" }
                    %span= b.text
          = f.input :emails, as: :array, input_html: { 'data-max': 3 }
          = f.input :phones, as: :array, input_html: { 'data-max': 3 }
          = f.input :websites, as: :array, input_html: { 'data-max': 3, placeholder: t('shared.url_placeholder') }
          .field-wrapper.field-tag
            %label.field-label= Place.human_attribute(:tags)
            %select.field-input{placeholder: t('simple_form.placeholders.place.tags'), multiple: 'multiple', name: 'place[tags][]'}
              =f.object.tags.active.map{|m| "<option selected='selected' data-state='#{m.processed}' class='#{m.processed_human}'>#{m.name}</option>" }.join("").html_safe
            - declined = f.object.tags.declined
            - if declined.present?
              .decline-list
                %label.field-label= t('admin.places.declined_tags')
                %ul
                  = declined.map{|m| "<li>#{m.name}</li>" }.join("").html_safe
          = f.input :published
          -# possible_providers = Provider.only_active.for_user(current_user, @is_admin_profile_page)
          -# possible_providers = possible_providers.excluding(f.object.provider.id) if f.object.provider.present?
          / .field-wrapper
          /   - if possible_providers.present?
          /     %label.field-label= custom_label(t('admin.places.update_provider'), true)
          /     = collection_select :place, :provider_id, possible_providers, :id, :name, { selected: f.object.provider.present? ? f.object.provider.id : @provider_id}, { class: 'field-input'}
          /   -# else
          /     %label.field-label= custom_label(t('admin.places.current_provider'))
          /     %span.field-input= f.object.provider.name
      .column
        = render partial: 'shared/fields_localization', locals: { fields: { address: nil, city: nil} , form: f }
        .indent
          = f.input :postal_code
          .field-wrapper
            %label.field-label= Place.human_attribute(:region)
            = f.collection_select :region_id, Region.all, :id, :name, {}, { class: 'field-input' }
          %a.map-locator{'data-map': 'locator_map'}= t("shared.locate_me")
          .locator.map-container
            #locator_map.map
            .map-zoomer
              .in{'data-map': 'locator_map'} +
              .hr
              .out{'data-map': 'locator_map'} âˆ’
          = f.input :latitude, as: :hidden
          = f.input :longitude, as: :hidden
    .fields-asset
      = f.input :poster_id, as: :hidden
      =# f.object.assets.length
      .field-wrapper.field-file
        = f.label :assets do
          %img{src: asset_path("svg/upload.svg") }
          = t("shared.upload_image")
        = f.input :assets, as: :file, label: false, wrapper: false, input_html: { name: "place[assets_attributes][][image]", multiple: true, accept: 'image/png,image/gif,image/jpeg' }

      - assets = f.object.assets.to_a

      - picked = nil
      - if f.object.poster_id.present?
        - picked = f.object.assets.find(f.object.poster_id)
        - assets.delete_if {|x| x.id == picked.id }
        - assets.unshift(picked)
      - assets.each do |asset|
        .field-wrapper.field-asset{'data-asset-id': asset.id, class: asset.id == f.object.poster_id ? 'picked' : nil }
          = image_tag asset.image.thumb.url
          .field-input
            = link_to t("shared.delete_image"), destroy_asset_manage_place_path(f.object.id, place: { assets_attributes: { id: asset.id, "_destroy" => true }}), remote: true, method: :put, 'data-type': 'json', data: { confirm: t('shared.are_you_sure') }
    .actions
      .action-group
        = f.submit t("app.common.reset"), type: :reset
        = f.submit t("app.common.save")
